http {
    
    # doc
    # http://nginx.org/en/docs/http/ngx_http_upstream_module.html#sticky

    # IP Hash â€“ The server to which a request is sent is determined from the client IP address. 
    # In this case, either the first three octets of the IPv4 address or the whole IPv6 address 
    # are used to calculate the hash value. The method guarantees that requests from the same 
    # address get to the same server unless it is not available.


    # sticky is another better practice for identify user uniquely. but it's only support commercial nginx plus
    # Syntax
    # sticky cookie name [expires=time] [domain=domain] [httponly] [samesite=strict|lax|none|$variable] [secure] [path=path];
    # sticky route $variable1 $variable1 $variable3 ;
    # sticky learn create=$variable lookup=$variable zone=name:size [timeout=time] [header] [sync];

    # resolve (commercial nginx plus)
    # monitors changes of the IP addresses that correspond to a domain name of the server, 
    # and automatically modifies the upstream configuration without the need of restarting nginx (1.5.12). 

    map $cookie_jsessionid $route_cookie {
        ~.+\.(?P<route>\w+)$ $route;
    }

    map $request_uri $route_uri {
        ~jsessionid=.+\.(?P<route>\w+)$ $route;
    }

    upstream backend {
        # no load balancing method is specified for Round Robin because it is default.
        #least_conn;

        #zone upstream_dynamic 64k;

        ip_hash; # better for user track in free verion(device wise)
        server 192.168.0.105:7000 weight=1;
        server 192.168.0.105:7001 weight=1;
        server 192.168.0.105:7002 weight=1;

        # server 192.168.0.105:7002 weight=1 resolve;

        # marks the server as permanently unavailable.
        # server 192.168.0.105:7002 weight=1 down;

        # servers listening on TCP and UNIX-domain sockets can be mixed.
        # server unix:/tmp/my_backend.sock;
        # server unix:/run/gunicorn.sock;

        # for paid version
        #sticky;
        #sticky cookie srv_id expires=1h domain=.example.com path=/;
        #sticky route $route_cookie $route_uri;
        #sticky learn create=$upstream_cookie_example lookup=$cookie_example zone=client_sessions:1m;

    }

    server {
        listen 80;
        location / {
            proxy_pass http://backend;
        }
    }
    
}


events { }

